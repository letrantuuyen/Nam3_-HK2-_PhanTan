
1/ Binary Data

Byte Stream
InputStream / OutputStream 

2/ Text Data
Character Stream
Reader / Writer


>= 1.7
Files / Path



package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class Exercice4 {
	public static void main(String[] args) throws InvocationTargetException, InterruptedException {
		SwingUtilities.invokeAndWait(() -> {
			new CopierGUI().setVisible(true);
		});
	}
}

class CopierGUI extends JFrame implements ActionListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3022044392351108380L;
	private JTextField tfFrom;
	private JTextField tfTo;
	private JButton btnCopy;
	private JProgressBar progressBar;

	public CopierGUI() {
		
		setSize(600, 250);
		setTitle("Copy utility");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		Box b = Box.createVerticalBox();
		
		getContentPane().add(b);
		b.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		
		Box b1, b2, b3, b4;
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(5));
		
		b1.setBorder(BorderFactory.createTitledBorder("From"));
		b1.add(tfFrom = new JTextField());
		b2.setBorder(BorderFactory.createTitledBorder("To"));
		b2.add(tfTo = new JTextField());
		
		b3.add(btnCopy = new JButton("Copy..."));
		b4.add(progressBar = new JProgressBar());
		progressBar.setStringPainted(true);
		
		btnCopy.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
	}
}


class CopyerTask extends SwingWorker<Long, Long>{
	
	private String fileFrom;
	private String fileTo;
	private long total = 0l;

	@Override
	protected Long doInBackground() throws Exception {
		
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		
		try {
			
			in = new BufferedInputStream(new FileInputStream(fileFrom));
			out = new BufferedOutputStream(new FileOutputStream(fileTo));
			int len = 1024;
			byte[] buff = new byte[len];
			
			while(in.available() > 0) {
				int n = in.read(buff, 0, len);
				out.write(buff, 0, n);
				
				total += n;
				
				publish(total);
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			in.close();
			out.close();
		}
		
		return null;
	}
	
	@Override
	protected void process(List<Long> chunks) {
		System.out.println(chunks);
	}
	
}
package exer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
impor